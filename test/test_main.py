import pandas as pd
from pandas_myutils.utils import order, idx_toggle_multi, idx_propagate_levels
import pytest

cols_flat = [ 'person.id', 'person.fullName.John Doe', 'person.link', 'jerseyNumber',
             'position.code.C', 'position.name.Center', 'stats.skaterStats.goals',
             'stats.skaterStats.assists', 'stats.skaterStats' ]
cols_mult = [
    ('person', 'id', ''),
    ('person', 'fullName', 'John Doe'),
    ('person', 'link', ''),
    ('jerseyNumber', '', ''),
    ('position', 'code', 'C'),
    ('position', 'name', 'Center'),
    ('stats', 'skaterStats', 'goals'),
    ('stats', 'skaterStats', 'assists'),
    ('stats', 'skaterStats', '')
]
cols_prop= [
    ('person', 'id', 'id'),
    ('person', 'fullName', 'John Doe'),
    ('person', 'link', 'link'),
    ('jerseyNumber', 'jerseyNumber', 'jerseyNumber'),
    ('position', 'code', 'C'),
    ('position', 'name', 'Center'),
    ('stats', 'skaterStats', 'goals'),
    ('stats', 'skaterStats', 'assists'),
    ('stats', 'skaterStats', 'skaterStats')
]

# Conventions in this file:
#  - index_* variables:  for fixtures and comparison purposes (i.e. not generated by our functions)
#  - idx_* variables:    generated by our functions

@pytest.fixture(scope='module')
def index_flat():
    yield pd.Index( cols_flat )

@pytest.fixture(scope='module')
def index_mult():
    yield pd.Index( cols_mult )

@pytest.fixture(scope='module')
def index_prop():
    yield pd.Index( cols_prop )

@pytest.fixture(scope='module')
def index_from_tuples(index_flat):
    # the tuples split from a flat index will not be of equal length and from_tuples() will generate nan's for the missing elements
    #  - index_from_tuples is used mostly to test idx_propagate_levels()

    tuples_list = [ tuple( colname.split('.') ) for colname in index_flat ]
    idx = pd.MultiIndex.from_tuples( tuples_list, names=['level_1', 'level_2', 'level_3'] )
    yield idx


def test_idx_propagate_levels(index_prop, index_from_tuples):
    idx_prop     = idx_propagate_levels( index_from_tuples )
    idx_reverted = idx_propagate_levels( idx_prop, revert=True )
    assert idx_prop.equals(     index_prop )
    assert idx_reverted.equals( index_from_tuples )

def test_idx_toggle_multi_no_propagate(index_flat, index_mult):
    idx_mult          = idx_toggle_multi( index_flat,  propragate=False )
    idx_flat_reverted = idx_toggle_multi( idx_mult,    propragate=False )
    assert idx_mult.equals(          index_mult )
    assert idx_flat_reverted.equals( index_flat )

    idx_flat          = idx_toggle_multi( index_mult,  propragate=False )
    idx_mult_reverted = idx_toggle_multi( idx_flat,    propragate=False )
    assert idx_flat.equals(          index_flat )
    assert idx_mult_reverted.equals( index_mult )

def test_idx_toggle_multi_with_propagate(index_flat, index_prop):
    idx_mult          = idx_toggle_multi( index_flat,  propragate=True )
    idx_flat_reverted = idx_toggle_multi( idx_mult,    propragate=True )
    assert idx_mult.equals(          index_prop )
    assert idx_flat_reverted.equals( index_flat )

    idx_flat          = idx_toggle_multi( index_prop,  propragate=True )
    idx_mult_reverted = idx_toggle_multi( idx_flat,    propragate=True )
    assert idx_flat.equals(          index_flat )
    assert idx_mult_reverted.equals( index_prop )

